# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(tidycensus)
library(knitr)
# Set your Census API key
census_api_key(Sys.getenv("ba33e51bc7f9bbf247d76be557bdef8d36278508Y"))
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "PA"
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(tidycensus)
library(knitr)
# Set your Census API key
census_api_key(Sys.getenv("ba33e51bc7f9bbf247d76be557bdef8d36278508Y"))
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "NJ"
# Write your get_acs() code here
county_data <- get_acs(
geography = "my_state",
variables = c(
median_income = "B19013_001",   # Median household income
total_population = "B01003_001"       # Total pop
),
state = my_state,
year = 2022,
output = "wide"
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(tidycensus)
library(knitr)
# Set your Census API key
census_api_key(Sys.getenv("ba33e51bc7f9bbf247d76be557bdef8d36278508Y"))
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "NJ"
# Write your get_acs() code here
county_data <- get_acs(
geography = "my_state",
variables = c(
median_income = "B19013_001",   # Median household income
total_population = "B01003_001"       # Total pop
),
state = my_state,
year = 2022,
output = "wide"
)
# Write your get_acs() code here
county_data <- get_acs(
geography = "my_state",
variables = c(
median_income = "B19013_001",   # Median household income
total_population = "B01003_001"       # Total pop
),
state = my_state,
year = 2022,
survey = "acs5",
output = "wide"
)
# Write your get_acs() code here
county_data <- get_acs(
geography = "my_state",
variables = c(
median_income = "B19013_001",   # Median household income
total_population = "B01003_001"       # Total pop
),
county = my_state,
year = 2022,
survey = "acs5",
output = "wide"
)
# Write your get_acs() code here
county_data <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",   # Median household income
total_population = "B01003_001"       # Total pop
),
state = my_state,
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
# Display the first few rows
View(county_data)
# Write your get_acs() code here
county_data <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",   # Median household income
total_population = "B01003_001"       # Total pop
),
state = my_state,
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county_data <- county_data %>%
mutate(county_name = NAME %>%
str_remove("County") %>%
str_remove(", New Jersey")
)
# Display the first few rows
head(county_data)
# Write your get_acs() code here
county_data <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",   # Median household income
total_population = "B01003_001"       # Total pop
),
state = my_state,
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
county_data <- county_data %>%
mutate(county_name = NAME %>%
str_remove("County") %>%
str_remove(", New Jersey")
)
# Display the first few rows
head(county_data,10)
View(county_data)
View(county_data)
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
View(county_data)
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100),
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100),
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100),
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100)
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
5 < median_incomeMOE < 10 ~ "Moderate Confidence",
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
5 < median_incomeMOE < 10 ~ "Moderate Confidence",
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
5 <= median_incomeMOE <= 10 ~ "Moderate Confidence",
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
median_incomeMOE >= 5 & median_incomeMOE < 10 ~ "Moderate Confidence",
median_incomeMOE >= 10 ~ "Low Confidence"
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
median_incomeMOE >= 5 & median_incomeMOE < 10 ~ "Moderate Confidence",
median_incomeMOE >= 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
median_incomeMOE >= 5 & median_incomeMOE < 10 ~ "Moderate Confidence",
median_incomeMOE >= 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
summary_data <- county_data %>%
count(rel_categories)
)
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
median_incomeMOE >= 5 & median_incomeMOE < 10 ~ "Moderate Confidence",
median_incomeMOE >= 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
summary_data <- county_data %>%
count(rel_categories)
View(summary_data)
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
median_incomeMOE >= 5 & median_incomeMOE < 10 ~ "Moderate Confidence",
median_incomeMOE >= 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
summary_data <- county_data %>%
count(rel_categories) %>%
mutate(percentage = n/sum(n))
)
View(summary_data)
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
median_incomeMOE >= 5 & median_incomeMOE < 10 ~ "Moderate Confidence",
median_incomeMOE >= 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
summary_data <- county_data %>%
mutate(count = count(rel_categories)) %>%
mutate(percentage = n/sum(n))
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
median_incomeMOE >= 5 & median_incomeMOE < 10 ~ "Moderate Confidence",
median_incomeMOE >= 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
summary_data <- county_data %>%
mutate(num = count(rel_categories)) %>%
mutate(percentage = num/sum(num))
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
median_incomeMOE >= 5 & median_incomeMOE < 10 ~ "Moderate Confidence",
median_incomeMOE >= 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
summary_data <- county_data %>%
count(rel_categories) %>%
mutate(percentage = n/sum(n))
)
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
median_incomeMOE >= 5 & median_incomeMOE < 10 ~ "Moderate Confidence",
median_incomeMOE >= 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
summary_data <- county_data %>%
count(rel_categories) %>%
mutate(percentage = n/sum(n))
)
# Calculate MOE percentage and reliability categories using mutate()
county_data <- county_data %>%
mutate(median_incomeMOE = (median_incomeM / median_incomeE) * 100,
rel_categories = case_when(
median_incomeMOE < 5 ~ "High Confidence",
median_incomeMOE >= 5 & median_incomeMOE < 10 ~ "Moderate Confidence",
median_incomeMOE >= 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
summary_data <- county_data %>%
count(rel_categories) %>%
mutate(percentage = n/sum(n))
