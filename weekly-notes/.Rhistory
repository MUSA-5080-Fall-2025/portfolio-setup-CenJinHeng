# Add this near the top of your .qmd after loading libraries
options(tigris_use_cache = TRUE)
options(tigris_progress = FALSE)  # Suppress tigris progress bars
# Load spatial data
pa_counties <- st_read("data/Pennsylvania_County_Boundaries.shp")
hospitals <- st_read("data/hospitals.geojson")
census_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
# Check that all data loaded correctly
# Load required packages
library(sf)
library(tidyverse)
library(tigris)
library(tidycensus)
library(scales)
library(patchwork)
library(here)
library(knitr)
# Add this near the top of your .qmd after loading libraries
options(tigris_use_cache = TRUE)
options(tigris_progress = FALSE)  # Suppress tigris progress bars
# Load spatial data
pa_counties <- st_read("data/Pennsylvania_County_Boundaries.shp")
hospitals <- st_read("data/hospitals.geojson")
census_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
# Check that all data loaded correctly
# Get demographic data from ACS
tract_data <- get_acs(
geography = "tract",
state     = "42",
variables = c(
total_population = "B01003_001",
median_household_income = "B19013_001"
),
year = 2023,
survey = "acs5",
output = "wide"
)
age_data <- get_acs(
geography = "tract",
state     = "42",
variables = c(
male_65 <- c("B01001_020","B01001_021","B01001_022","B01001_023","B01001_024","B01001_025"),
female_65 <- c("B01001_044","B01001_045","B01001_046","B01001_047","B01001_048","B01001_049")
),
year = 2023,
survey = "acs5",
) %>%
group_by (GEOID) %>%
summarise(pop_65 = sum(estimate, na.rm = TRUE))
tract_data <- tract_data %>%
left_join(age_data, by = "GEOID")
tract_data %>%
summarise(missing_data = sum(is.na(median_household_incomeE)))
tract_data %>%
summarise(median_income = sum(median(median_household_incomeE, na.rm = TRUE)))
# Join to tract boundaries
census_tracts_joined <- census_tracts %>%
left_join(tract_data, by = "GEOID")
# Filter for vulnerable tracts based on your criteria
census_tracts_joined <- census_tracts_joined %>%
mutate(
percentage_65 = pop_65/total_populationE
)
vulnerable_tracts <- census_tracts_joined %>%
filter(median_household_incomeE < 48000,
percentage_65 > 0.20
)
# Transform to appropriate projected CRS
vulnerable_tracts_proj <- vulnerable_tracts %>%
st_transform(5070) # 5070 is for the whole country. For south PA alone, we can use 3365, which is more precise.
hospitals_proj <- hospitals %>%
st_transform(5070)
# Calculate distance from each tract centroid to nearest hospital
tract_centroids <- st_centroid(vulnerable_tracts_proj)
nearest_hospital_idx <- st_nearest_feature(tract_centroids, hospitals_proj)
dist_to_hospital <- st_distance(
tract_centroids,
hospitals_proj[nearest_hospital_idx, ],
by_element = TRUE
)
vulnerable_tracts_proj <- vulnerable_tracts_proj %>%
mutate(
dist_to_hospital = as.numeric(dist_to_hospital),
dist_to_hospital_mi = dist_to_hospital * 0.000621371
)
distant_data <- vulnerable_tracts_proj %>%
summarise(
avg_distance = mean(dist_to_hospital_mi, na.rm = TRUE),
max_dist = max(dist_to_hospital_mi, na.rm = TRUE),
)
num_over15 <- vulnerable_tracts_proj %>%
filter(dist_to_hospital_mi > 15) %>%
summarise(
n_over15 = n(),
)
# Create underserved variable
undeserved <- vulnerable_tracts_proj %>%
filter(dist_to_hospital_mi > 15)
# Spatial join tracts to counties
vulnerable_tracts_proj <- st_transform(vulnerable_tracts_proj, st_crs(pa_counties))
undeserved  <- st_transform(undeserved , st_crs(pa_counties))
counties_num = census_tracts %>%
st_centroid() %>%
st_join(pa_counties%>% select(COUNTY_NAM)) %>%
st_drop_geometry() %>%
group_by(COUNTY_NAM) %>%
summarize(
n_tract =  n(),
)%>%
arrange(n_tract)
counties_vuln <- vulnerable_tracts_proj %>%
st_centroid() %>%
st_join(pa_counties%>% select(COUNTY_NAM)) %>%
st_drop_geometry() %>%
group_by(COUNTY_NAM) %>%
summarize(
n_vuln =  n(),
avg_dist_vuln_mi = mean(dist_to_hospital_mi, na.rm = TRUE),
total_vuln_pop = sum(pop_65, na.rm = TRUE)
) %>%
arrange(desc(total_vuln_pop))
counties_unders <- undeserved %>%
st_centroid() %>%
st_join(pa_counties%>% select(COUNTY_NAM)) %>%
st_drop_geometry() %>%
group_by(COUNTY_NAM) %>%
summarize(
n_unders =  n(),
) %>%
arrange(desc(n_unders))
# Aggregate statistics by county
counties_stat = counties_num %>%
left_join(counties_vuln, by = "COUNTY_NAM") %>%
left_join(counties_unders, by = "COUNTY_NAM") %>%
mutate(
percentage_unders = n_unders / n_vuln,
percentage_vuln = n_vuln / n_tract
)%>%
arrange(desc(percentage_vuln))
# Create and format priority counties table
# metrics for the priority: vulnerable index = normalized_number_of_vulnerable_tracts*0.3 + normalized_average_distant _hospital*0.5 + normalized_total_population*0.2
scale_minmax <- function(x) {
rng <- range(x, na.rm = TRUE)
if (!is.finite(diff(rng)) || diff(rng) == 0) return(rep(0.5, length(x)))
(x - rng[1]) / diff(rng)
}
counties_stat_index <- counties_stat %>%
mutate(
n_vuln_norm = scale_minmax(n_vuln),
avg_dist_vuln_mi_norm = scale_minmax(avg_dist_vuln_mi),
total_vuln_pop_norm = scale_minmax(total_vuln_pop),
percentage_vuln_norm = scale_minmax(percentage_vuln)
) %>%
mutate(
vuln_index =
0.3  * n_vuln_norm +
0.5 * avg_dist_vuln_mi_norm +
0.2 * total_vuln_pop_norm
) %>%
arrange(desc(vuln_index))
#make table
counties_table <- counties_stat_index %>%
select(
county_name = COUNTY_NAM,
vulnerable_index = vuln_index,
vulnerable_tract_number = n_vuln,
average_dist_to_hospital = avg_dist_vuln_mi,
total_vulnerable_pop = total_vuln_pop
) %>%
mutate(
vulnerable_index = round(vulnerable_index, 3),
average_dist_to_hospital = round(average_dist_to_hospital, 2),
total_vulnerable_pop = comma(total_vulnerable_pop)
)%>%
arrange(desc(vulnerable_index))
kable(
counties_table,
caption = "PA County-level Vulnerability Summary",
align = "lcccc"
)
# Create county-level access map
# I use percentage of vulnerable tract here
library(ggplot2)
counties_stat_sf <- pa_counties %>%
select(COUNTY_NAM, geometry) %>%
left_join(counties_stat, by = "COUNTY_NAM")
p1 <- ggplot() +
# county base map
geom_sf(
data = counties_stat_sf,
aes(fill = percentage_vuln),
color = "white", size = 0.2
) +
# hospitals
geom_sf(
data = hospitals_proj,
shape = 21, fill = "red",
size = 1.8, alpha = 0.9
) +
# legend
scale_fill_viridis_c(
name = "% vulnerable tracts",
labels = label_percent(accuracy = 1),
limits = c(0, 1),
option = "C",
direction = -1
) +
coord_sf() +
theme_void(base_size = 12) +
theme(
legend.position = "right",
legend.title = element_text(size = 10, face = "bold"),
legend.text  = element_text(size = 9),
plot.title   = element_text(face = "bold", size = 16),
plot.subtitle= element_text(size = 12)
) +
labs(
title    = "Healthcare Access Challenges by County",
subtitle = "share of vulnerable census tracts",
caption  = "Source: analysis based on income and percentage of people over 65 years old."
) +
guides(fill = guide_colorbar(
barheight = unit(70, "pt"),
barwidth  = unit(8,  "pt"),
ticks.colour = "black"
))
p1
# Create detailed tract-level map
p2 <- ggplot() +
# tract base map
geom_sf(
data = census_tracts,
color = "grey", size = 0.1
) +
# county base map
geom_sf(
data = pa_counties,
color = "lightblue", size = 0.5,fill = NA,
) +
# hospitals
geom_sf(
data = hospitals_proj,
shape = 16, color = "red",
size = 1, alpha = 0.9
) +
# underserved community
geom_sf(
data = undeserved,
color = "blue"
)+
coord_sf() +
theme_void(base_size = 12) +
theme(
plot.title   = element_text(face = "bold", size = 16),
plot.subtitle= element_text(size = 12)
) +
labs(
title    = "Underserved Communities",
subtitle = "Blue tracts represent underserved communities; red points show hospital locations."
) +
guides(fill = guide_colorbar(
barheight = unit(70, "pt"),
barwidth  = unit(8,  "pt"),
ticks.colour = "black"
))
p2
#only one very small blue tract in the center of the map
# Create distribution visualization
# Histogram or density plot of distances
ggplot(vulnerable_tracts_proj) +
aes(x = dist_to_hospital_mi) +
geom_histogram(bins = 15, fill = "steelblue", alpha = 0.7) +
labs(
title = "Distribution of distance to the nearest hospital",
x = "distance to the nearest hospital",
y = "Number of vulnerable tracts",
caption  = "Most of tracts have distance between 0 and 5."
) +
theme_minimal()
# Box plot comparing distances across regions
ggplot(vulnerable_tracts_proj) +
aes(x = NAMELSADCO, y = dist_to_hospital_mi, fill = NAMELSADCO) +
geom_boxplot() +
labs(
title = "Distances by County Category",
x = "County",
y = "Distance",
caption  = "While most counties show little variation, four counties have huge internal differences"
) +
theme_minimal() +
theme(legend.position = "none")+
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 7)
)
# Bar chart of underserved tracts by county
#only 1 underserved tracts in my study, it is Census Tract 9601 in the Cameron County
# Scatter plot of distance vs. vulnerable population size
ggplot(vulnerable_tracts_proj) +
aes(x = dist_to_hospital_mi, y = total_populationE) +
geom_point(color = "steelblue", alpha = 0.6, size = 2) +
geom_smooth(
method = "lm",
se = TRUE,
color = "darkred",
fill = "pink",
linewidth = 1
) +
labs(
title = "distance vs. vulnerable population size",
x = "Distance to the nearest hospital",
y = "Vulnerable population size",
caption  = str_wrap("More vulnerable population, little distance to hospital. Since hospitals are designed to located near population clusters, and we didn't limit this effect in this study ", width = 90)
) +
theme_minimal() +
scale_x_continuous() +
scale_y_continuous(labels = comma)
# Load your additional dataset
library(sf)
schools <- st_read("Data/Schools/Schools.shp")
crime <- st_read("Data/Crime/Crime.shp")
bike_network <- st_read("Data/Bike_Network/Bike_Network.shp")
schools <- st_transform(schools, 2272)
crime <- st_transform(crime, 2272)
bike_network <- st_transform(bike_network, 2272)
library(dplyr)
library(ggplot2)
## school type
schools %>%
st_drop_geometry() %>%
count(type_speci, sort = TRUE) %>%
ggplot(aes(x = reorder(type_speci, n), y = n)) +
geom_bar(stat = "identity", fill = "lightblue") +
coord_flip() +
labs(
title = "Distribution of school types",
x = "School type",
y = "Number"
) +
theme_minimal(base_size = 13)
# Crime Hour
crime %>%
st_drop_geometry() %>%
count(hour) %>%
ggplot(aes(x = hour, y = n)) +
geom_col(fill = "firebrick") +
labs(
title = "Distribution of crime hour",
x = "Hour",
y = "Number of incidents"
) +
theme_minimal(base_size = 13)
#crime types
crime %>%
st_drop_geometry() %>%
count(text_gener, sort = TRUE) %>%
slice_max(n, n = 10) %>%
ggplot(aes(x = reorder(text_gener, n), y = n)) +
geom_bar(stat = "identity", fill = "orange") +
coord_flip() +
labs(
title = "Top 10 Crime Types",
x = "Types",
y = "Number of incidents"
) +
theme_minimal(base_size = 13)
# Bike lane
bike_length_summary <- bike_network %>%
st_drop_geometry() %>%
group_by(TYPE) %>%
summarise(total_length = sum(Shape__Len, na.rm = TRUE)) %>%
arrange(desc(total_length))
ggplot(bike_length_summary, aes(x = reorder(TYPE, total_length), y = total_length)) +
geom_bar(stat = "identity", fill = "forestgreen") +
coord_flip() +
labs(
title = "Distribution of Bike Lane Type",
x = "Type",
y = "Total Length"
) +
theme_minimal(base_size = 13)
# Your spatial analysis
# I have loaded data sets and make simple statistical analysis for each of them in the previous chunk
# Create buffer for schools
schools <- schools %>% mutate(school_id = row_number())
zones <- st_buffer(schools, dist = 1000)
# Calculate the crime number
crime_by_zone <- crime %>%
st_join(zones %>% select(school_id), join = st_within) %>%
st_drop_geometry() %>%
count(school_id, name = "crime_count")
# Calculate the bike lane length
bike_in_zone <- st_intersection(bike_network, zones %>% select(school_id))
bike_len_by_zone <- bike_in_zone %>%
mutate(len_ft = as.numeric(st_length(.))) %>%
st_drop_geometry() %>%
group_by(school_id) %>%
summarise(bike_len_ft = sum(len_ft, na.rm = TRUE), .groups = "drop")
# Combine the result
zone_stats <- zones %>%
left_join(crime_by_zone,    by = "school_id") %>%
left_join(bike_len_by_zone, by = "school_id")
# Calculate average number of the crime incidents and bike lane length
zone_summary <- zone_stats %>%
st_drop_geometry() %>%
summarise(
mean_crime = mean(crime_count, na.rm = TRUE),
mean_bike_len = mean(bike_len_ft, na.rm = TRUE)
)
city_summary <- tibble(
mean_crime = nrow(crime) / nrow(zones),
mean_bike_len = sum(st_length(bike_network)) / nrow(zones)
)
# Combine results
comparison <- rbind(
data.frame(Category = "School Zones",
mean_crime = zone_summary$mean_crime,
mean_bike_len = zone_summary$mean_bike_len),
data.frame(Category = "Citywide Average",
mean_crime = city_summary$mean_crime,
mean_bike_len = city_summary$mean_bike_len)
)
# Draw diagram
ggplot(comparison, aes(x = Category, y = mean_crime, fill = Category)) +
geom_bar(stat = "identity", width = 0.6) +
labs(
title = "Comperison of Average Crime Incidents: School Zones VS City",
y = "Averge Crime Incidents"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
ggplot(comparison, aes(x = Category, y = mean_bike_len, fill = Category)) +
geom_bar(stat = "identity", width = 0.6) +
labs(
title = "Comperison of Bike Lane Length: School Zones VS City",
y = "Average Bike Lane Length"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
# Mapping
# Get tracts of Philly
tracts_phl <- get_acs(
geography = "tract",
state     = "PA",
county    = "Philadelphia",
variables = "B01003_001",
survey    = "acs5",
year      = 2022,
geometry  = TRUE,
cache_table = TRUE
) %>%
select(GEOID, NAME, pop = estimate, geometry) %>%
st_transform(2272)
# point_on_surface
zone_points <- zone_stats |>
mutate(geometry = st_point_on_surface(geometry),
bike_len_mile = bike_len_ft / 5280) |>
st_as_sf()
# Crime point map
ggplot() +
geom_sf(data = tracts_phl, fill = NA, color = "grey", linewidth = 0.2) +
geom_sf(data = zone_points, aes(size = crime_count), color = "firebrick", alpha = 0.6) +
scale_size_continuous(name = "Crime count", range = c(0, 4)) +
labs(title = "School Zones: Crime Counts (Point size = count)", x = NULL, y = NULL) +
theme_minimal(base_size = 13) +
theme(legend.position = "right")
# Bike lane point map
ggplot() +
geom_sf(data = tracts_phl, fill = NA, color = "grey", linewidth = 0.2) +
geom_sf(data = zone_points, aes(size = bike_len_mile), color = "forestgreen", alpha = 0.6) +
scale_size_continuous(name = "Bike lane (miles)", range = c(0.1, 2)) +
labs(title = "School Zones: Bike Lane Length (Point size = miles)", x = NULL, y = NULL) +
theme_minimal(base_size = 13) +
theme(legend.position = "right")
# Get demographic data from ACS
tract_data <- get_acs(
geography = "tract",
state     = "42",
variables = c(
total_population = "B01003_001",
median_household_income = "B19013_001"
),
year = 2023,
survey = "acs5",
output = "wide",
progress = FALSE
)
age_data <- get_acs(
geography = "tract",
state     = "42",
variables = c(
male_65 <- c("B01001_020","B01001_021","B01001_022","B01001_023","B01001_024","B01001_025"),
female_65 <- c("B01001_044","B01001_045","B01001_046","B01001_047","B01001_048","B01001_049")
),
year = 2023,
survey = "acs5",
progress = FALSE
) %>%
group_by (GEOID) %>%
summarise(pop_65 = sum(estimate, na.rm = TRUE))
tract_data <- tract_data %>%
left_join(age_data, by = "GEOID")
tract_data %>%
summarise(missing_data = sum(is.na(median_household_incomeE)))
tract_data %>%
summarise(median_income = sum(median(median_household_incomeE, na.rm = TRUE)))
# Join to tract boundaries
census_tracts_joined <- census_tracts %>%
left_join(tract_data, by = "GEOID")
